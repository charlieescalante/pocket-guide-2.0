import streamlit as st
from openai import OpenAI
from streamlit_geolocation import streamlit_geolocation
import os
import base64

# Initialize OpenAI client
client = OpenAI(api_key=st.secrets['OPENAI_API_Key'])

# Title and Information
st.title("PocketGuide with Voice")
st.info(
    "**Note**: The content presented here is generated by AI, and any spoken narration uses an AI-generated voice."
)

# Initialize session states
if "step" not in st.session_state:
    st.session_state.step = 0  # Step 0: Initial state, Step 1: GPS retrieved

if "location" not in st.session_state:
    st.session_state.location = None

if "messages" not in st.session_state:
    st.session_state.messages = [
        {
            "role": "system",
            "content": (
                "You are a tour guide. Provide detailed insights into a user's surroundings "
                "based on GPS coordinates. Speak as though you've lived there your entire life, "
                "with rich detail and history."
            ),
        }
    ]

# Function: Text-to-Speech
def text_to_speech(input_text):
    response = client.audio.speech.create(
        model="tts-1",
        voice="nova",
        input=input_text
    )
    audio_file_path = "temp_audio.mp3"
    with open(audio_file_path, "wb") as f:
        response.stream_to_file(audio_file_path)
    return audio_file_path

# Function: Autoplay Audio
def autoplay_audio(file_path):
    with open(file_path, "rb") as f:
        data = f.read()
    b64 = base64.b64encode(data).decode("utf-8")
    md = f"""
    <audio autoplay>
    <source src="data:audio/mp3;base64,{b64}" type="audio/mp3">
    </audio>
    """
    st.markdown(md, unsafe_allow_html=True)

# Step 0: Retrieve GPS Coordinates
if st.session_state.step == 0:
    st.write("Click the button below to fetch your location.")
    location = streamlit_geolocation()
    if location and location["latitude"] and location["longitude"]:
        st.session_state.location = location
        st.success("Geolocation Retrieved Successfully!")
        st.session_state.step = 1  # Move to Step 1
    else:
        st.warning("Waiting for location...")

# Step 1: Generate Tour
elif st.session_state.step == 1:
    lat = st.session_state.location["latitude"]
    lon = st.session_state.location["longitude"]

    st.write(f"**Latitude:** {lat}")
    st.write(f"**Longitude:** {lon}")

    if st.button("Generate Tour"):
        # Prepare user input for OpenAI
        user_message = f"My current GPS coordinates are: Latitude {lat}, Longitude {lon}."
        st.session_state.messages.append({"role": "user", "content": user_message})

        # Debugging: Display the OpenAI request payload
        st.write("**OpenAI Request Payload:**")
        st.json(st.session_state.messages)

        # Call OpenAI ChatCompletion
        with st.spinner("Generating your tour guide narration..."):
            try:
                chatresponse = client.chat.completions.create(
                    model="gpt-4",
                    messages=st.session_state.messages,
                    temperature=1,
                    n=1,
                )

                # Debugging: Display the raw OpenAI response
                st.write("**OpenAI Response:**")
                st.json(chatresponse)

                # Extract the assistantâ€™s response
                if (
                    "choices" in chatresponse
                    and len(chatresponse.choices) > 0
                    and "message" in chatresponse.choices[0]
                    and "content" in chatresponse.choices[0].message
                ):
                    tour_guide_text = chatresponse.choices[0].message.content.strip()
                    st.session_state.messages.append({"role": "assistant", "content": tour_guide_text})

                    st.write("---")
                    st.markdown("#### Your PocketGuide says:")
                    st.write(tour_guide_text)

                    # Generate and play audio
                    with st.spinner("Generating audio..."):
                        audio_file = text_to_speech(tour_guide_text)
                        autoplay_audio(audio_file)
                        os.remove(audio_file)
                else:
                    st.error("OpenAI returned an invalid response. Please try again.")

            except Exception as e:
                st.error(f"An error occurred while communicating with OpenAI: {e}")

        # Reset the steps for another tour
        st.session_state.step = 0
